name: 'Build and deploy Frontend'

on:
  push:
    branches:
    - master
  workflow_dispatch:

#Special permissions required for OIDC authentication.
permissions:
  id-token: write
  contents: read

#These environment variables are used by the terraform azure provider to setup OIDD authenticate. 
env:
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    env:
      ARM_SKIP_PROVIDER_REGISTRATION: true
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:
    # Checkout the repository to the GitHub Actions runner.
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of the Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform

    # Checks that all Terraform configuration files adhere to a canonical format
    # Will fail the build if not
    - name: Terraform Format
      run: terraform fmt -check
      working-directory: ./terraform

    # Generates an execution plan for Terraform
    # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
    - name: Terraform Plan
      id: tf-plan
      run: |
        export exitcode=0
        terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?

        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        
        if [ $exitcode -eq 1 ]; then
          echo Terraform Plan Failed!
          exit 1
        else 
          exit 0
        fi
      working-directory: ./terraform
        
    # Save plan to artifacts  
    - name: Publish Terraform Plan
      uses: actions/upload-artifact@v3
      with:
        name: tfplan
        path: ./terraform/tfplan
        
    # Create string output of Terraform Plan
    - name: Create String Output
      id: tf-plan-string
      run: |
        TERRAFORM_PLAN=$(terraform show -no-color tfplan)
        
        delimiter="$(openssl rand -hex 8)"
        echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
        echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
        echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo '```terraform' >> $GITHUB_OUTPUT
        echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        echo "</details>" >> $GITHUB_OUTPUT
        echo "${delimiter}" >> $GITHUB_OUTPUT
      working-directory: ./terraform
        
    # Publish Terraform Plan as task summary
    - name: Publish Terraform Plan to Task Summary
      env:
        SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
      run: |
        echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
        
  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: [terraform-plan]
    # environment:
    #   name: 'dev'
    
    outputs:
      storage_account_name: ${{ steps.tf-apply-outputs.outputs.storage_account_name }}
    
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform

    # Download saved plan from artifacts  
    - name: Download Terraform Plan
      uses: actions/download-artifact@v3
      with:
        name: tfplan
        path: ./terraform/

    # Terraform Apply
    - name: Terraform Apply
      id: tf-apply
      run:  |
        terraform apply -auto-approve tfplan | tee apply_output.txt
        if [ ${PIPESTATUS[0]} -ne 0 ]; then
          echo "Terraform Apply failed."
          exit 1
        fi
      working-directory: ./terraform

    # Set Terraform Outputs
    - name: Set Terraform Outputs
      id: tf-apply-outputs
      shell: pwsh
      run: |
        "primary_web_host=$(((Select-String -Path ./apply_output.txt -Pattern 'primary_web_host').line -split '"')[1])" >> $env:GITHUB_OUTPUT
        "resource_group_name=$(((Select-String -Path ./apply_output.txt -Pattern 'resource_group_name').line -split '"')[1])" >> $env:GITHUB_OUTPUT
        "storage_account_name=$(((Select-String -Path ./apply_output.txt -Pattern 'storage_account_name').line -split '"')[1])" >> $env:GITHUB_OUTPUT
        "cdn_endpoint=$(((Select-String -Path ./apply_output.txt -Pattern 'cdn_endpoint').line -split '"')[1])" >> $env:GITHUB_OUTPUT
        "cdn_profile_name=$(((Select-String -Path ./apply_output.txt -Pattern 'cdn_profile_name').line -split '"')[1])" >> $env:GITHUB_OUTPUT
      working-directory: ./terraform
  
  website-deploy:
    name: 'Deploy Website'
    runs-on: ubuntu-latest
    needs: [terraform-apply]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to Azure
        id: LoginToAzure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      - name: Deploy to Azure Static Website
        uses: azure/cli@v1
        with:
          inlineScript: |
            az storage blob upload-batch -s ./website -d \$web --account-name ${{ needs.terraform-apply.outputs.storage_account_name }} --overwrite

      - name: Purge CDN endpoint
        run: |
          az cdn endpoint purge -n ${{ needs.terraform-apply.outputs.cdn_endpoint }} --profile-name ${{ needs.terraform-apply.outputs.cdn_profile_name }} --content-paths "/*" --resource-group ${{ needs.terraform-apply.outputs.storage_account_name }} --no-wait